#!/usr/bin/env groovy

/**
* Installation:
* chmod +x git-config
* cp git-config /usr/local/bin
*/

import com.fasterxml.jackson.annotation.JsonIgnore
import groovy.cli.commons.CliBuilder
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.ToString


def cli = new CliBuilder(usage: 'git-config -[hvroi]')
def HOME_FOLDER = System.getProperty("user.home") + File.separator + "git-config"

cli.with {
    h(longOpt: 'help', 'Usage Information \n', required: false)
    c(longOpt: 'configure', 'Configure user info \n', required: false)
    s(longOpt: 'show', 'Show user info \n', required: false)
    sl(longOpt: 'show-local', 'Show local configuration \n', required: false)
    p(convert: { it as String }, longOpt: 'profile','use profile configuration', required: false)
    i(convert: { new File(it) }, longOpt: 'input','name of the configuration file', required: false)
}

// Read the input from console
def options = cli.parse(args)
if (!options) {
    println "Invalid arguments, please see the usage section: "
    cli.usage()
    return
}
File homeFolder = new File(HOME_FOLDER)
File configurationFile = new File(HOME_FOLDER, "config.json")

@ToString
class GitConfig {
    String userName
    String userEmail
}

def showLocalConfiguration = { ->
    print "Repo:  "+('git config --get remote.origin.url'.execute().text)
    print "Name:  "+('git config --local user.name'.execute().text)
    print "Email: "+('git config --local user.email'.execute().text)
}

def readData = { type ->
    println "Setup [$type] data"
    GitConfig config = new GitConfig()
    print "Name:  "
    config?.userName = System.in.newReader().readLine()
    print "Email: "
    config?.userEmail = System.in.newReader().readLine()
    println "-------------------"
    config
}

def readAndValidateProfile = {
    print "Do you want to add new profile? y/n: "
    String answer = System.in.newReader().readLine().toLowerCase()
    if( answer != 'y' ) {
        return false
    }

    print "Type the name of the profile: "
    answer = System.in.newReader().readLine().toLowerCase()
    answer
}

def setupRepositoryConfig = { profile, gitConfig ->
    GitConfig config = gitConfig as GitConfig
    if(!config) {
       println "Invalid configuration [${profile}] please verify the information and try again"
       System.exit(1)
    }
    println "Setting up configuration [${profile}] for the current repository"
    "git config user.email ${config.userEmail}".execute().waitFor()
    ['git', 'config', 'user.name', config.userName].execute().waitFor()

}

def configure = {
    println "Setting up configuration"
    def profileName = 'personal'
    Map<String, GitConfig> configuration = [:]

    do {
      configuration << [(profileName) : readData(profileName)]
    } while((profileName = readAndValidateProfile()))

    configurationFile.withWriter { out ->
        out.write(JsonOutput.prettyPrint(JsonOutput.toJson(configuration)))
        out.close()
    }
    configuration
}

def readConfiguration = {
    Map<String, GitConfig> configuration = [:]
    try {
        configuration = new JsonSlurper().parseText(configurationFile.text)
        if(configuration.isEmpty()) {
            configuration = configure()
        }
    } catch (IllegalArgumentException ia) {
        println ia.message
        configuration = configure()
    }
    configuration
}

if(!homeFolder.exists()) {
    println "Creating home folder [${HOME_FOLDER}]"
    homeFolder.mkdirs()
}

if (options.h) {
    cli.usage()
    return
}

if(options.c) {
    configure()
    return
}

if(options.f) {
    configurationFile = options.f
}

if(!configurationFile.exists()) {
    println "Configuration file doesn't exists, creating default configuration on ${HOME_FOLDER}"
    configurationFile = new File(HOME_FOLDER, "config.json")
    configurationFile.createNewFile()
}

if(options.s) {
    println configurationFile.text
    return
}

if(options.sl) {
    showLocalConfiguration()
    return
}

// Setup configuration for local env
Map<String, GitConfig> configuration = readConfiguration()
if(options.p) {
    setupRepositoryConfig(options.p, configuration[options.p])
} else {
    setupRepositoryConfig('personal', configuration['personal'])
}
showLocalConfiguration()
